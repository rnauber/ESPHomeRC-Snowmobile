
substitutions:
  devicename: rcsnowmobile
  updatetimeoutms: "700"

esphome:
  name: $devicename
  platform: ESP32
  board: esp32dev
  on_loop:
    then:
      - lambda: |-
            const uint32_t now = millis();
            if (now - id(lastupdate) > $updatetimeoutms) { // timeout! reset to a safe state
                id(hbridge_M1A).set_level(0);
                id(hbridge_M1B).set_level(0);
                id(hbridge_M2A).set_level(0);
                id(hbridge_M2B).set_level(0);
            }        
  
logger:
  level: DEBUG
#  baud_rate: 0 #disable UART to reuse the GPIO

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: !secret wifi_ssid2
      password: !secret wifi_password2
    - ssid: !secret wifi_ssid3
      password: !secret wifi_password3
#  ap:
#    ssid: "$devicename AP"
#    password: !secret  ap_password 
#    channel: 10
#	 reboot_timeout: 0s

#web_server:
#  port: 80

ota:

globals:
  - id: lastupdate
    type: uint32_t
    restore_value: no
    initial_value: '0'
    
api:    
  services:
    - service: hbridge
      variables:
        index: int # index of the hbridge starting with 0
        strength: float # -1.0 .. +1.0
        brake: bool # true for braking 
      then:
        - lambda: |-
            if (isnan(strength))
                strength = 0;
                
            id(lastupdate) = millis();
            if (index == 0){ // left
             if ((strength > 0)){
                id(hbridge_M1A).set_level(abs(strength));
                id(hbridge_M1B).set_level(0);
               } else {
                id(hbridge_M1A).set_level(0);
                id(hbridge_M1B).set_level(abs(strength));
                }
            } else if (index == 1){  // right
             if ((strength > 0)){
                id(hbridge_M2A).set_level(abs(strength));
                id(hbridge_M2B).set_level(0);
               } else {
                id(hbridge_M2A).set_level(0);
                id(hbridge_M2B).set_level(abs(strength));
                }
            } else if (index == 2){ // white led
                id(gpio_whiteled).set_level(abs(strength));
            } else {
                ESP_LOGD("hbridge", " index=%i strength=%f brake=%i millis=%i", index, strength, brake, millis() );
            } 
  reboot_timeout: 0s                           

esp32_camera:
  external_clock:
    pin: GPIO0
    frequency: 20MHz
  i2c_pins:
    sda: GPIO26
    scl: GPIO27
  data_pins: [GPIO5, GPIO18, GPIO19, GPIO21, GPIO36, GPIO39, GPIO34, GPIO35]
  vsync_pin: GPIO25
  href_pin: GPIO23
  pixel_clock_pin: GPIO22
  power_down_pin: GPIO32
  name: "$devicename Camera"


output:
  - platform: ledc 
    channel: 2    #not setting this breaks the camera!
    pin: GPIO04
    id: gpio_whiteled
    inverted: False
    max_power: 0.3
    
  - platform: ledc 
    channel: 3    #not setting this breaks the camera!
    pin: GPIO12
    id: hbridge_M1A
    inverted: False
    max_power: 1
    frequency: 100kHz
     
  - platform: ledc 
    channel: 4    #not setting this breaks the camera!
    pin: GPIO13
    id: hbridge_M1B
    inverted: False
    max_power: 1
    frequency: 100kHz

  - platform: ledc 
    channel: 5    #not setting this breaks the camera!
    pin: GPIO14
    id: hbridge_M2A
    inverted: False
    max_power: 1
    frequency: 100kHz
     
  - platform: ledc 
    channel: 6    #not setting this breaks the camera!
    pin: GPIO2
    id: hbridge_M2B
    inverted: False
    max_power: 1
    frequency: 100kHz

